import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/Card"
import { CheckCircle, Circle, FileCheck } from "lucide-react"
import { Button } from "./ui/Button"
import { Progress } from "./ui/Progress"

export function SubmissionChecklist() {
  // In a real app, this would be generated by your AI analysis
  const checklist = [
    {
      id: 1,
      category: "Document Format",
      items: [
        { id: "1-1", description: "Use 12pt Times New Roman font", completed: false },
        { id: "1-2", description: "1-inch margins on all sides", completed: false },
        { id: "1-3", description: "Maximum 50 pages for technical proposal", completed: false },
        { id: "1-4", description: "Double-spaced text", completed: false },
      ],
    },
    {
      id: 2,
      category: "Required Attachments",
      items: [
        { id: "2-1", description: "Signed SF 33 Form", completed: false },
        { id: "2-2", description: "Past Performance References (3 minimum)", completed: true },
        { id: "2-3", description: "Resumes of Key Personnel", completed: true },
        { id: "2-4", description: "Cost Breakdown Structure", completed: false },
        { id: "2-5", description: "Project Schedule", completed: false },
      ],
    },
    {
      id: 3,
      category: "Proposal Sections",
      items: [
        { id: "3-1", description: "Executive Summary (max 2 pages)", completed: false },
        { id: "3-2", description: "Technical Approach", completed: false },
        { id: "3-3", description: "Management Approach", completed: false },
        { id: "3-4", description: "Staffing Plan", completed: true },
        { id: "3-5", description: "Quality Control Plan", completed: false },
        { id: "3-6", description: "Risk Management Plan", completed: false },
      ],
    },
    {
      id: 4,
      category: "Submission Requirements",
      items: [
        { id: "4-1", description: "Submit via SAM.gov portal", completed: false },
        { id: "4-2", description: "One original and two copies of printed proposal", completed: false },
        { id: "4-3", description: "Electronic copy on USB drive (PDF format)", completed: false },
        { id: "4-4", description: "Separate volumes for Technical and Cost proposals", completed: false },
      ],
    },
  ]

  // Calculate completion percentage
  const totalItems = checklist.reduce((acc, category) => acc + category.items.length, 0)
  const completedItems = checklist.reduce(
    (acc, category) => acc + category.items.filter((item) => item.completed).length,
    0,
  )
  const completionPercentage = Math.round((completedItems / totalItems) * 100)

  return (
    <Card className="mt-4">
      <CardHeader>
        <CardTitle className="flex items-center">
          <FileCheck className="h-5 w-5 mr-2" />
          Submission Checklist
        </CardTitle>
        <CardDescription>Document requirements and submission guidelines extracted from the RFP</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="mb-6">
          <div className="flex justify-between mb-2">
            <h3 className="font-medium">Submission Readiness</h3>
            <span className="text-sm font-medium">{completionPercentage}% complete</span>
          </div>
          <Progress value={completionPercentage} className="h-2" />
          <p className="text-sm text-muted-foreground mt-2">
            {completedItems} of {totalItems} requirements completed
          </p>
        </div>

        <div className="space-y-6">
          {checklist.map((category) => (
            <div key={category.id}>
              <h3 className="font-medium mb-3">{category.category}</h3>
              <div className="space-y-2">
                {category.items.map((item) => (
                  <div
                    key={item.id}
                    className={`flex items-start p-3 border rounded-md ${
                      item.completed
                        ? "bg-green-50 dark:bg-green-950/20 border-green-200 dark:border-green-900"
                        : "bg-gray-50 dark:bg-gray-900"
                    }`}
                  >
                    {item.completed ? (
                      <CheckCircle className="h-5 w-5 text-green-600 mr-3 mt-0.5 flex-shrink-0" />
                    ) : (
                      <Circle className="h-5 w-5 text-gray-400 mr-3 mt-0.5 flex-shrink-0" />
                    )}
                    <span className="text-sm">{item.description}</span>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>

        <div className="mt-6 flex gap-4">
          <Button>Export Checklist</Button>
          <Button variant="outline">Generate Template Documents</Button>
        </div>
      </CardContent>
    </Card>
  )
}

