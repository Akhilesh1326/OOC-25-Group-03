import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/Card";
import { AlertCircle, FileSearch, Clipboard, CheckCircle2, XCircle, Lightbulb } from 'lucide-react';
import { Badge } from "./ui/Badge";
import { Button } from "./ui/Button";
import { ScrollArea } from "./ui/ScrollArea";

export function RequirementsExtractor() {
  // In a real app, this would be generated by your AI analysis
  const extractedRequirements = [
    {
      id: 1,
      category: "Technical",
      requirement: "Experience with FHIR healthcare data standards",
      section: "Technical Requirements, pg. 12",
      priority: "high",
      status: "fulfilled"
    },
    {
      id: 2,
      category: "Technical",
      requirement: "Cloud-native application architecture",
      section: "Architecture Guidelines, pg. 15",
      priority: "high",
      status: "fulfilled"
    },
    {
      id: 3,
      category: "Compliance",
      requirement: "HIPAA compliance for all systems and personnel",
      section: "Compliance, pg. 22",
      priority: "high",
      status: "fulfilled"
    },
    {
      id: 4,
      category: "Certifications",
      requirement: "ISO 27001 certified processes",
      section: "Security, pg. 28",
      priority: "medium",
      status: "fulfilled"
    },
    {
      id: 5,
      category: "Experience",
      requirement: "Previous experience with HHS systems",
      section: "Prior Experience, pg. 8",
      priority: "medium",
      status: "fulfilled"
    },
    {
      id: 6,
      category: "Staffing",
      requirement: "Dedicated security officer with CISSP certification",
      section: "Team Requirements, pg. 31",
      priority: "high",
      status: "fulfilled"
    },
    {
      id: 7,
      category: "Performance",
      requirement: "99.99% uptime SLA for critical systems",
      section: "SLAs, pg. 43",
      priority: "high",
      status: "gap"
    },
    {
      id: 8,
      category: "Technical",
      requirement: "Experience with automated testing frameworks",
      section: "Quality Assurance, pg. 18",
      priority: "medium",
      status: "fulfilled"
    }
  ];

  const statusCounts = {
    fulfilled: extractedRequirements.filter(r => r.status === "fulfilled").length,
    gap: extractedRequirements.filter(r => r.status === "gap").length,
    total: extractedRequirements.length
  };

  return (
    <Card className="mt-4">
      <CardHeader>
        <CardTitle className="flex items-center">
          <FileSearch className="h-5 w-5 mr-2" />
          Requirements Analysis
        </CardTitle>
        <CardDescription>
          AI-extracted requirements matched against ConsultAdd's capabilities
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <Card>
            <CardContent className="p-4 flex flex-col items-center text-center">
              <Clipboard className="h-8 w-8 text-gray-500 mb-2" />
              <p className="text-2xl font-bold">{statusCounts.total}</p>
              <p className="text-sm text-muted-foreground">Total Requirements</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 flex flex-col items-center text-center">
              <CheckCircle2 className="h-8 w-8 text-green-600 mb-2" />
              <p className="text-2xl font-bold">{statusCounts.fulfilled}</p>
              <p className="text-sm text-muted-foreground">Fulfilled Requirements</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 flex flex-col items-center text-center">
              <AlertCircle className="h-8 w-8 text-amber-500 mb-2" />
              <p className="text-2xl font-bold">{statusCounts.gap}</p>
              <p className="text-sm text-muted-foreground">Capability Gaps</p>
            </CardContent>
          </Card>
        </div>

        <ScrollArea className="h-[400px] border rounded-lg p-4">
          <div className="space-y-4">
            {extractedRequirements.map((req) => (
              <div key={req.id} className="border rounded-lg p-4">
                <div className="flex justify-between items-start mb-2">
                  <h3 className="font-medium">{req.requirement}</h3>
                  <Badge className={req.status === "fulfilled" ? "bg-green-600" : "bg-amber-500"}>
                    {req.status === "fulfilled" ? "Fulfilled" : "Gap"}
                  </Badge>
                </div>
                <div className="text-sm text-muted-foreground mb-2">
                  Category: {req.category} â€¢ Priority: {req.priority.charAt(0).toUpperCase() + req.priority.slice(1)}
                </div>
                <div className="text-sm text-muted-foreground">
                  Source: {req.section}
                </div>
                
                {req.status === "gap" && (
                  <div className="mt-3 bg-amber-50 dark:bg-amber-950/20 p-3 rounded-md flex items-start gap-2">
                    <Lightbulb className="h-5 w-5 text-amber-500 flex-shrink-0 mt-0.5" />
                    <div className="text-sm">
                      <p className="font-medium">Recommendation:</p>
                      <p>Consider partnering with a specialized service provider to meet the 99.99% uptime SLA requirement.</p>
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        </ScrollArea>

        <div className="mt-6 flex gap-4">
          <Button>Export Requirements</Button>
          <Button variant="outline">Generate Gap Analysis Report</Button>
        </div>
      </CardContent>
    </Card>
  );
}
